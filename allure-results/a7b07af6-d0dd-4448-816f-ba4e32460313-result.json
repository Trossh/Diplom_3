{"name": "Переход в ленту заказов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\">...</p> is not clickable at point (300, 44). Other element would receive the click: <path d=\"M69.8177 29C67.7698 29 66.4524 28.168 65.8657 26.504C65.6417 25.864 65.5297 25.192 65.5297 24.488V20.072H68.4417V24.216C68.4417 24.9093 68.6551 25.4533 69.0817 25.848C69.4231 26.168 69.9137 26.328 70.5537 26.328H78.9218V29H69.8177Z\" fill=\"white\"></path>\n  (Session info: chrome=139.0.7258.139)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6690078d5+2802741]\n\tGetHandleVerifier [0x0x7ff668d6eb70+79568]\n\t(No symbol) [0x0x7ff668b0c0fa]\n\t(No symbol) [0x0x7ff668b6aaa9]\n\t(No symbol) [0x0x7ff668b68442]\n\t(No symbol) [0x0x7ff668b65481]\n\t(No symbol) [0x0x7ff668b64371]\n\t(No symbol) [0x0x7ff668b55bb8]\n\t(No symbol) [0x0x7ff668b8ac8a]\n\t(No symbol) [0x0x7ff668b55466]\n\t(No symbol) [0x0x7ff668b8aea0]\n\t(No symbol) [0x0x7ff668bb2e24]\n\t(No symbol) [0x0x7ff668b8aa63]\n\t(No symbol) [0x0x7ff668b53c91]\n\t(No symbol) [0x0x7ff668b54a23]\n\tGetHandleVerifier [0x0x7ff669032ced+2979917]\n\tGetHandleVerifier [0x0x7ff66902d0f3+2956371]\n\tGetHandleVerifier [0x0x7ff66904acbd+3078173]\n\tGetHandleVerifier [0x0x7ff668d8836e+184014]\n\tGetHandleVerifier [0x0x7ff668d9024f+216495]\n\tGetHandleVerifier [0x0x7ff668d770c4+113700]\n\tGetHandleVerifier [0x0x7ff668d77279+114137]\n\tGetHandleVerifier [0x0x7ff668d5df78+10968]\n\tBaseThreadInitThunk [0x0x7ffa37da7374+20]\n\tRtlUserThreadStart [0x0x7ffa38e3cc91+33]", "trace": "self = <tests.test_main_functionality.TestMainFunctionality object at 0x000001A26CDAC0D0>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6996a50ba669a04c429bfc870ec1f35f\")>\n\n    @allure.title(\"Переход в ленту заказов\")\n    def test_navigate_to_order_feed(self, driver):\n        main_page = MainPage(driver)\n    \n        main_page.go_to_site()\n>       main_page.click_order_feed()\n\ntests\\test_main_functionality.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pages\\main_page.py:11: in click_order_feed\n    self.click(MainPageLocators.ORDER_FEED_BUTTON)\nsrc\\pages\\base_page.py:26: in click\n    element.click()\n..\\Diplom_3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\Diplom_3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\Diplom_3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A26CDCB110>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff668d5df78+10968]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa37da7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa38e3cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <p class=\"AppHeader_header__linkText__3q_va ml-2\">...</p> is not clickable at point (300, 44). Other element would receive the click: <path d=\"M69.8177 29C67.7698 29 66.4524 28.168 65.8657 26.504C65.6417 25.864 65.5297 25.192 65.5297 24.488V20.072H68.4417V24.216C68.4417 24.9093 68.6551 25.4533 69.0817 25.848C69.4231 26.168 69.9137 26.328 70.5537 26.328H78.9218V29H69.8177Z\" fill=\"white\"></path>\nE         (Session info: chrome=139.0.7258.139)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6690078d5+2802741]\nE       \tGetHandleVerifier [0x0x7ff668d6eb70+79568]\nE       \t(No symbol) [0x0x7ff668b0c0fa]\nE       \t(No symbol) [0x0x7ff668b6aaa9]\nE       \t(No symbol) [0x0x7ff668b68442]\nE       \t(No symbol) [0x0x7ff668b65481]\nE       \t(No symbol) [0x0x7ff668b64371]\nE       \t(No symbol) [0x0x7ff668b55bb8]\nE       \t(No symbol) [0x0x7ff668b8ac8a]\nE       \t(No symbol) [0x0x7ff668b55466]\nE       \t(No symbol) [0x0x7ff668b8aea0]\nE       \t(No symbol) [0x0x7ff668bb2e24]\nE       \t(No symbol) [0x0x7ff668b8aa63]\nE       \t(No symbol) [0x0x7ff668b53c91]\nE       \t(No symbol) [0x0x7ff668b54a23]\nE       \tGetHandleVerifier [0x0x7ff669032ced+2979917]\nE       \tGetHandleVerifier [0x0x7ff66902d0f3+2956371]\nE       \tGetHandleVerifier [0x0x7ff66904acbd+3078173]\nE       \tGetHandleVerifier [0x0x7ff668d8836e+184014]\nE       \tGetHandleVerifier [0x0x7ff668d9024f+216495]\nE       \tGetHandleVerifier [0x0x7ff668d770c4+113700]\nE       \tGetHandleVerifier [0x0x7ff668d77279+114137]\nE       \tGetHandleVerifier [0x0x7ff668d5df78+10968]\nE       \tBaseThreadInitThunk [0x0x7ffa37da7374+20]\nE       \tRtlUserThreadStart [0x0x7ffa38e3cc91+33]\n\n..\\Diplom_3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1756198172226, "stop": 1756198174646, "uuid": "0d1f343c-180f-4563-be99-d7542a29772f", "historyId": "1fb47af0b11063ea30a6342666bc627d", "testCaseId": "320712933ba8766df84b3f2a2907ba5a", "fullName": "tests.test_main_functionality.TestMainFunctionality#test_navigate_to_order_feed", "labels": [{"name": "feature", "value": "Основной функционал"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_functionality"}, {"name": "subSuite", "value": "TestMainFunctionality"}, {"name": "host", "value": "WIN-88DRHG89BG7"}, {"name": "thread", "value": "10700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_functionality"}]}