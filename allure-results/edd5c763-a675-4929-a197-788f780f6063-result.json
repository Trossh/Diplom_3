{"name": "Открытие деталей заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_order_feed.TestOrderFeed object at 0x000001A26CDAFED0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"614ff4de-244d-4681-bb47-a493bb6913bb\")>\n\n    @allure.title(\"Открытие деталей заказа\")\n    def test_order_details_modal(self, driver):\n        order_feed_page = OrderFeedPage(driver)\n    \n        order_feed_page.go_to_site()\n>       order_feed_page.click_order()\n\ntests\\test_order_feed.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pages\\order_feed_page.py:8: in click_order\n    orders = self.find_elements(OrderFeedPageLocators.ORDER_CARD)\nsrc\\pages\\base_page.py:20: in find_elements\n    return WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"614ff4de-244d-4681-bb47-a493bb6913bb\")>, method = <function visibility_of_all_elements_located.<locals>._predicate at 0x000001A26D229A80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\Diplom_3\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "parameters": [{"name": "driver", "value": "'firefox'"}], "start": 1756198297916, "stop": 1756198310243, "uuid": "fbdefb8d-ba30-4d26-9417-a53137010d1c", "historyId": "5759b24e17c682999d0eb8dfa44ceb2b", "testCaseId": "917601cac8d54cc647586f9f5c7c5d6d", "fullName": "tests.test_order_feed.TestOrderFeed#test_order_details_modal", "labels": [{"name": "feature", "value": "Лента заказов"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "WIN-88DRHG89BG7"}, {"name": "thread", "value": "10700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}