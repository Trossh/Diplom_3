{"name": "Проверка отображения ленты заказов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_order_feed.TestOrderFeed object at 0x000001EBDDA14790>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"32dd2c70ca5e1d4d1400cb5f7c3634f6\")>\n\n    @allure.title(\"Проверка отображения ленты заказов\")\n    def test_order_feed_display(self, driver):\n        order_feed_page = OrderFeedPage(driver)\n    \n        order_feed_page.go_to_site()\n    \n>       assert order_feed_page.is_order_feed_page()\n\ntests\\test_order_feed.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc\\pages\\order_feed_page.py:27: in is_order_feed_page\n    return self.wait_for_url(Config.ORDER_FEED_URL)\nsrc\\pages\\base_page.py:56: in wait_for_url\n    return WebDriverWait(self.driver, timeout).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"32dd2c70ca5e1d4d1400cb5f7c3634f6\")>, method = <function url_to_be.<locals>._predicate at 0x000001EBDDE2CAE0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\Diplom_3\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1756200980823, "stop": 1756200993668, "uuid": "c768a6cc-8405-40dd-b7f5-a18adfb599c6", "historyId": "654f248182612fa0b7f53c73272aed41", "testCaseId": "025dbfde149950597f1b51100cf54872", "fullName": "tests.test_order_feed.TestOrderFeed#test_order_feed_display", "labels": [{"name": "feature", "value": "Лента заказов"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "WIN-88DRHG89BG7"}, {"name": "thread", "value": "19224-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}